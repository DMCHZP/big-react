(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.React));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	// <div>123</div>
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    tag;
	    key;
	    stateNode;
	    pendingProps;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    alternate;
	    flags;
	    subtreeFlags;
	    memoizedProps;
	    memoizedState;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        //真实dom结构
	        this.stateNode = null;
	        //节点类型比如 FunctionComponment
	        this.type = null;
	        //构成树状结构
	        //指向父fiber
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        //多节点中的索引位置
	        this.index = 0;
	        this.ref = null;
	        //作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        //副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	// 根结点的 FiberNode 原生dom 对象
	class FiberRootNode {
	    container;
	    current;
	    finishWorked;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        //FiberRootNode 的 current 指向 hostRootFiber (跟节点的 fiberNode 对象)
	        this.current = hostRootFiber;
	        //根结点的 FiberNode 的 stateNode 指向当前 FiberRootNode
	        hostRootFiber.stateNode = this;
	        this.finishWorked = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    // 获取fiber的缓存fiber
	    let wip = current.alternate;
	    if (wip === null) {
	        //如果为空 就是 mount 阶段
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        //不为空就是 update 阶段
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        //<div/> type:'div'
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型');
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action: action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseSate, pendingUpdate) => {
	    const result = {
	        memoizedState: baseSate
	    };
	    if (pendingUpdate != null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseSate);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    function reconileSingleElement(returnFiber, // wip fiberNode
	    currentFiber, //wip.child fiberNode
	    element //wip对应的child reactElement
	    ) {
	        //根据 element 创建 fiber 并返回
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconilerSingleTextNode(returnFiber, // wip fiberNode
	    currentFiber, //wip.child fiberNode
	    content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, // wip fiberNode
	    currentFiber, //wip.child fiberNode
	    newChild //wip对应的child的reactElement
	    ) {
	        if (typeof newChild === 'object' && newChild != null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的 reconciler类型 ', newChild);
	                    }
	            }
	        }
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconilerSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        // TODO 多节点的情况 ul> li*3
	        {
	            console.warn('未实现的 reconciler类型 ', newChild);
	        }
	        return null;
	    };
	}
	const reconcilerChildFiber = ChildReconciler(true);
	const mountChildFiber = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	let currentlyRenderingFiber = null;
	let workInProgressHook = null;
	const { currentDispathcer } = internals;
	function renderWithHooks(wip) {
	    //赋值操作
	    currentlyRenderingFiber = wip;
	    wip.memoizedState = null;
	    const current = wip.alternate;
	    if (current != null) ;
	    else {
	        //mount
	        currentDispathcer.current = HooksDispathcerOnMount;
	    }
	    //对于函数组件 函数就保存在 type
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    //这里执行函数组件就会执行组件内的hooks函数，同时函数返回的就是 react element
	    const children = Component(props);
	    //重制
	    currentlyRenderingFiber = null;
	    return children;
	}
	const HooksDispathcerOnMount = {
	    useState: mountState
	};
	function mountState(initialState) {
	    //找到当前useState对应的hooks数据
	    const hook = mountWorkInProgresHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizeState = memoizedState;
	    //@ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    //对于hooks更新来说，是从当前hooks对应的fiber开始的
	    scheduleUpdateOnFiber(fiber);
	}
	function mountWorkInProgresHook() {
	    const hook = {
	        memoizeState: null,
	        next: null,
	        updateQueue: null
	    };
	    if (workInProgressHook === null) {
	        //mount时第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        //mount时 后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}

	//递归中的递阶段
	const beginWork = (wip) => {
	    //比较 react element 和 fiberNode，返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            //1. 对于 根结点的fiberNode 要做两件事 1. 计算状态的最新值 2.创造子fiberNode
	            return updateHostRoot(wip);
	        case HostComponent:
	            //1.创造子fiberNode
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginWork 未实现类型');
	            }
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    //对于根节点fiberNode 的 updateQueue.shared.pending; 是一个 reactElement
	    //就我们的应用是<div id="app"><App/></div>，hostRootFiber对应的是div，他的子元素对应的是App，但是App这个ReactElement被传给hostRootFiber作为memoizedState，hostRootFiber根据这个memoizedState来生成子FiberNode
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    //这里 memoizedState 是一个 reactElement
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current != null) {
	        //update
	        wip.child = reconcilerChildFiber(wip, current?.child, children);
	    }
	    else {
	        //mount
	        wip.child = mountChildFiber(wip, null, children);
	    }
	}

	//export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	// 相当于beginWork CompleteWork 那样从finishedWork（也就是 hostRootFiber ）递归遍历
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect != null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) != NoFlags && child != null) {
	            nextEffect = child;
	        }
	        else {
	            while (nextEffect != null) {
	                //向下遍历到第一个没有subtreeFlags的fiber节点 ，然后执行effect
	                commitMutationEffectsOnFiber(nextEffect);
	                //指向兄弟节点，然后重复以上过程
	                const sibling = nextEffect.sibling;
	                if (sibling != null) {
	                    nextEffect = sibling;
	                    break;
	                }
	                //处理完之后向上遍历处理
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        //位运算，移除该flags
	        finishedWork.flags &= ~Placement;
	    }
	};
	//提交插入操作的effecct
	const commitPlacement = (finishedWork) => {
	    //parent Dom
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    //获取当前fiber HostParent ：比如当前fiber是 <A/> :<p>1</p> ｜ <div><A/><div> ｜ 这种情况 HostParent 就是 div
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent != null) {
	        // 把当前fiber的dom 插入到 hostParent （注意当前 fiber 可能不是一个 HostComponent）（）
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	//获取当前fiber ,最近的HostComponent
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到HostParent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    //当前fiberNode 为HostComponent或者 HostText 才能进行dom的插入
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child != null) {
	        //递归继续寻找
	        appendPlacementNodeIntoContainer(child, hostParent);
	        //继续寻找兄弟节点
	        let sibling = child.sibling;
	        while (sibling != null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	const completeWork = (wip) => {
	    //ccc
	    const nextProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current != null && wip.stateNode) ;
	            else {
	                //1. 构建DOM （创建当前fiberNode 对应的真实dom）
	                //const instance = createInstance(wip.type, nextProps);
	                const instance = createInstance(wip.type);
	                //2. 将Dom插入到Dom树 （递归遍历找到当前fiberNode下所有 对应有 HostComponent 的节点（包括子节点和兄弟节点），并且append到上面 instance dom中 ）
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current != null && wip.stateNode) ;
	            else {
	                //1. 构建DOM
	                const instance = createTextInstance(nextProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	    }
	};
	// function A(){
	// 	return <div></div>
	// }
	// <h3><A/></h3>
	//对于以上例子 A的 fiberNode 要插入h3 实际上应该是 A 的子fiberNode div dom 插入到 h3中
	//作用：递归遍历当 前fiberNode下所有的子节点，把各个子节点的dom插入到当前fiber对应的dom中
	function appendAllChildren(parent, wip) {
	    // 为什么要拿 wip.child？假设当前wip 是<div><p>111</p><p>222</p></div> div就是当前的为 hostComponent 的fiberNode ，
	    // 这个方法的目的就是递归遍历（子节点）找到当前fiberNode 下所有 HostComponent或HostText 并且把他们 插入到 parent dom（当前fiberNode 对应的真实dom）中
	    let node = wip.child;
	    while (node != null) {
	        if (node?.tag === HostComponent || node?.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child != null) {
	            //这个种情况相当于  <div><A/><p>222</p></div> 中的 A组件 ，然后找到 A组件child为 HostComponment
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        //
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            //归阶段
	            node = node.return;
	        }
	        //appendInitialChild 后还要处理兄弟节点
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	//flags 冒泡，当前fiberNode 的 subtreeFlags 会包含它所有子节点的flags
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	function scheduleUpdateOnFiber(fiber) {
	    // TODO 调度功能
	    //保证了是从根节点开始调度更新， 常见的触发更新的方式：如果是 ReactDOM.createRoot().render（或老版的ReactDOM.render）、 this.setState、 useState的dispatch方法
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	//调用 setState 时候会从当前fiber 向上遍历到根节点 ， 该方法是获取根节点fiberNode
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent != null) {
	        node = parent;
	        parent = parent.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (err) {
	            {
	                console.warn('workLoop发生错误', err);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishWorked = finishedWork;
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishWorked;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit 阶段开始', finishedWork);
	    }
	    root.finishWorked = null;
	    // 判断是否存在3个子阶段需要执行的操作
	    // root flags root subtreeFlags
	    const subTreeHasEffect = (finishedWork.subtreeFlags & MutationMask) != NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) != NoFlags;
	    if (subTreeHasEffect || rootHasEffect) {
	        //beForeMutation
	        //mutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        //layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress != null) {
	        performanceUnitOfWork(workInProgress);
	    }
	}
	// function App(){
	// 	return (
	// 		<div>
	// 			Hello
	// 			<span></span>
	// 		</div>
	// 	)
	// }
	//1.HostRootFiber beginWork (生成App FiberNode)
	//2.App FiberNode beginWork (生成 div FiberNode)
	//3.Div FiberNode beginWork (生成 Hello 、Span fiberNode)
	//4.“Hello” fiberNode beginWork （叶子节点）(HostText)
	//5.“Hello” fiberNode completeWork (HostText)
	//6.span fiberNode beginWork (HostComponent)
	//7.span fiberNode completeWork
	//8.Div fiberNode completeWork
	//9.App fiberNode completeWork
	//10.HostRootFiber fiberNode completeWork
	function performanceUnitOfWork(fiber) {
	    //beginWork 会根据当前 fiberNode 创建出他第一个child的fiberNode ，next 是当前fiberNode的子fiberNode
	    const next = beginWork(fiber);
	    //这里fiber 完成后，所有pendingProps已经准备好，就可以赋值给memoizedProps
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node?.return;
	        workInProgress = node;
	    } while (node != null);
	}

	function createContainer(container) {
	    /*
	     * 创建根节点的fiberNode 叫做 hostRootFiber，hostRootFiber的stateNode也就是他的原生dom 指向 fiberRootNode
	     *
	     */
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    // 创建更新队列
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
